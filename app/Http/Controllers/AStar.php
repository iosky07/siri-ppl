<?php


namespace App\Http\Controllers;


use Illuminate\Support\Facades\Auth;

class AStar
{

    private $_start; // 开始点
    private $_end; // 结束点
    private $_node1;
    private $_x; // 最大x轴
    private $_y; // 最大y轴
    private $_num; // 障碍点数量

    private $_around; // 当前节点的可能四周节点数组
    private $_g; // g值数组

    public $open; // 开放节点数组
    public $close; // 关闭节点数组
    public $disable = array(); // 随机生成的障碍点数组

    public $route = array(); // 结果路径数组

    /**
     * @param $start array 开始点
     * @param $end array 结束点
     * @param $x int 最大x轴
     * @param $y int 最大y轴
     * @param $num int 最大随机障碍点数量
     */
    public function __construct($start, $end, $x, $y, $num)
    {
        $this->_start = $start;
        $this->_end = $end;
//        $this->_node1 = array();
        $this->_x = 26;
        $this->_y = 41;
        $this->_num = 70;

        // 开始寻路
        $this->_route();
    }

    private function _route()
    {
        // 生成随机路障点
        $this->_makeDisable();
        // 算法开始
        $this->_start();
    }

    private function _start()
    {

        $point[0] = $this->_start[0];
        $point[1] = $this->_start[1];
        $point['i'] = $this->_pointInfo($this->_start);
        $point['f'] = 0;
        $this->_g[$point['i']] = 0;
        $point['h'] = $this->_getH($this->_start);
        $point['p'] = null;

        $this->open[$point['i']] = $this->close[$point['i']] = $point;
        while (count($this->open) > 0) {

            $f = 0;
            foreach ($this->open as $info => $node) {
                if ($f === 0 || $f > $node['f']) {
                    $minInfo = $info;
                    $f = $node['f'];
                }
            }


            $current = $this->open[$minInfo];
            unset($this->open[$minInfo]);

            $this->close[$minInfo] = $current;


            if ($current[0] == $this->_end[0] && $current[1] == $this->_end[1]) {

                while ($current['p'] !== null) {
                    $tmp = $this->close[$this->_pointInfo($current['p'])];
                    array_unshift($this->route, array($tmp[0], $tmp[1]));
                    $current = $this->close[$this->_pointInfo($current['p'])];
                }
                array_push($this->route, $this->_end);
                break;
            }


            $this->_setAround($current);

            $this->_updateAround($current);
        }

    }

    private function _updateAround($current)
    {
        foreach ($this->_around as $v) {
            if (!isset($this->close[$this->_pointInfo($v)])) { // 不在close里面才处理
                if (isset($this->open[$this->_pointInfo($v)])) { // 在open里面，比较值，小则更新
                    if ($this->_getG($current) < $this->_g[$this->_pointInfo($v)]) {
                        $this->_updatePointDetail($current, $v);
                    }
                } else { // 不在open里面，直接更新
                    $this->open[$this->_pointInfo($v)][0] = $v[0];
                    $this->open[$this->_pointInfo($v)][1] = $v[1];
                    $this->_updatePointDetail($current, $v);
                }
            }
        }
    }

    private function _updatePointDetail($current, $around)
    {
        $this->open[$this->_pointInfo($around)]['f'] = $this->_getF($current, $around);
        $this->_g[$this->_pointInfo($around)] = $this->_getG($current);
        $this->open[$this->_pointInfo($around)]['h'] = $this->_getH($around);
        $this->open[$this->_pointInfo($around)]['p'] = $current;
    }


    private function _setAround($point)
    {

        $roundX[] = $point[0];
        ($point[0] - 1 > 0) && $roundX[] = $point[0] - 1;
        ($point[0] + 1 <= $this->_x) && $roundX[] = $point[0] + 1;
        $roundY[] = $point[1];
        ($point[1] - 1 > 0) && $roundY[] = $point[1] - 1;
        ($point[1] + 1 <= $this->_y) && $roundY[] = $point[1] + 1;

        $this->_around = array();
        foreach ($roundX as $vX) {
            foreach ($roundY as $vY) {
                $tmp = array(
                    0 => $vX,
                    1 => $vY,
                );

                if (
                    !in_array($tmp, $this->disable) &&
                    !in_array($tmp, $this->close) &&
                    !($vX == $point[0] && $vY == $point[1]) &&
                    ($vX == $point[0] || $vY == $point[1])
                )
                    $this->_around[] = $tmp;
            }
        }
    }

    /**
     * 返回当前节点的唯一key
     */
    private function _pointInfo($point)
    {
        return $point[0] . '_' . $point[1];
    }

    /**
     * F值计算：F = G + H
     */
    private function _getF($parent, $point)
    {
        return $this->_getG($parent) + $this->_getH($point);
    }

    /**
     * G值计算
     */
    private function _getG($current)
    {
        return isset($this->_g[$this->_pointInfo($current)]) ? $this->_g[$this->_pointInfo($current)] + 1 : 1;
    }

    /**
     * H值计算
     */
    private function _getH($point)
    {
        return abs($point[0] - $this->_end[0]) + abs($point[1] - $this->_end[1]);
    }

    /**
     * 随机生成路障点数组
     */
    private function _makeDisable()
    {
        if ($this->_num > $this->_x * $this->_y)
            exit('too many disable point');

        if (Auth::id() == 2) {
            $tmp = array([1, 10], [2, 1], [3, 3], [4, 3], [5, 3], [6, 3], [7, 3], [8, 3], [9, 3], [3, 4], [4, 4], [5, 4], [6, 4], [7, 4], [8, 4], [9, 4], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [8, 5], [9, 5], [3, 6], [4, 6], [5, 6], [6, 6], [7, 6], [8, 6], [9, 6],
                [11, 4], [12, 4], [13, 4], [14, 4], [15, 4], [16, 4], [17, 4], [18, 4], [11, 5], [12, 5], [13, 5], [14, 5], [15, 5], [16, 5], [17, 5], [18, 5], [11, 6], [12, 6], [13, 6], [14, 6], [15, 6], [16, 6], [17, 6], [18, 6],
                [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30],
                [2, 30], [3, 30], [4, 30], [5, 30], [6, 30], [7, 30], [8, 30], [9, 30], [10, 30], [11, 30], [12, 30], [13, 30], [14, 30], [15, 30], [16, 30], [17, 30], [18, 30], [19, 30], [20, 30], [2, 26], [2, 27], [2, 28], [2, 29], [16, 7], [17, 7], [18, 7],
                [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [3, 9], [4, 9], [5, 9], [6, 9], [7, 9], [8, 9], [9, 9], [3, 10], [4, 10], [5, 10], [6, 10], [7, 10], [8, 10], [9, 10], [3, 11], [4, 11], [5, 11], [6, 11], [7, 11], [8, 11], [9, 11], [3, 12], [4, 12], [5, 12],
                [6, 12], [7, 12], [8, 12], [9, 12], [3, 13], [4, 13], [5, 13], [6, 13], [7, 13], [8, 13], [9, 13], [3, 14], [4, 14], [5, 14], [6, 14], [7, 14], [8, 14], [3, 15], [4, 15], [5, 15], [6, 15], [7, 15], [8, 15],
                [11, 8], [12, 8], [13, 8], [14, 8], [20, 8], [11, 9], [12, 9], [13, 9], [14, 9], [15, 9], [16, 9], [18, 9], [19, 9], [20, 9], [11, 10], [12, 10], [13, 10], [14, 10], [15, 10], [16, 10], [18, 10], [19, 10], [20, 10], [11, 11], [12, 11], [13, 11], [14, 11], [15, 11],
                [16, 11], [18, 11], [19, 11], [20, 11], [11, 12], [12, 12], [13, 12], [14, 12], [15, 12], [16, 12], [18, 12], [19, 12], [20, 12], [11, 13], [12, 13], [13, 13], [14, 13], [15, 13], [16, 13], [18, 13], [19, 13], [20, 13], [11, 14], [12, 14], [13, 14], [14, 14], [15, 14],
                [16, 14], [18, 14], [19, 14], [20, 14], [10, 15], [11, 15], [12, 15], [13, 15], [14, 15], [15, 15], [16, 15], [18, 15], [19, 15], [20, 15], [15, 16], [16, 16], [18, 16], [19, 16], [20, 16], [10, 17], [11, 17], [12, 17], [13, 17], [19, 17], [20, 17], [10, 18], [11, 18],
                [12, 18], [13, 18], [14, 18], [15, 18], [16, 18], [17, 18], [19, 18], [20, 18], [10, 19], [11, 19], [12, 19], [13, 19], [14, 19], [15, 19], [16, 19], [17, 19], [19, 19], [20, 19], [10, 20], [11, 20], [12, 20], [13, 20], [14, 20], [15, 20], [16, 20], [17, 20], [19, 20],
                [20, 20], [10, 21], [11, 21], [12, 21], [13, 21], [14, 21], [15, 21], [16, 21], [17, 21], [19, 21], [20, 21], [10, 22], [11, 22], [12, 22], [13, 22], [14, 22], [15, 22], [16, 22], [17, 22], [19, 22], [20, 22], [10, 23], [11, 23], [12, 23], [13, 23], [14, 23], [15, 23],
                [16, 23], [17, 23], [19, 23], [20, 23], [10, 24], [11, 24], [12, 24], [13, 24], [14, 24], [15, 24], [16, 24], [17, 24], [19, 24], [20, 24], [19, 25], [20, 25], [10, 26], [11, 26], [12, 26], [13, 26], [14, 26], [15, 26], [16, 26], [18, 26], [19, 26], [20, 26], [10, 27],
                [11, 27], [12, 27], [13, 27], [14, 27], [15, 27], [16, 27], [18, 27], [19, 27], [20, 27], [10, 28], [11, 28], [12, 28], [13, 28], [14, 28], [15, 28], [16, 28], [18, 28], [19, 28], [20, 28], [18, 29], [19, 29], [20, 29],
                [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1], [12, 1], [13, 1], [14, 1], [15, 1], [16, 1], [17, 1], [18, 1], [19, 1], [20, 1], [11, 2], [12, 2], [13, 2], [14, 2], [15, 2], [16, 2], [17, 2], [18, 2], [19, 2], [20, 2], [20, 3],
                [20, 4], [20, 5], [20, 6], [20, 7], [3, 17], [4, 17], [5, 17], [6, 17], [7, 17], [8, 17], [3, 18], [4, 18], [5, 18], [6, 18], [7, 18], [8, 18], [3, 19], [4, 19], [5, 19], [6, 19], [7, 19], [8, 19], [3, 20], [4, 20], [5, 20], [6, 20], [7, 20], [8, 20], [3, 21], [4, 21],
                [5, 21], [6, 21], [7, 21], [8, 21], [3, 22], [4, 22], [5, 22], [6, 22], [7, 22], [8, 22], [3, 23], [4, 23], [5, 23], [6, 23], [7, 23], [8, 23], [3, 24], [4, 24], [5, 24], [6, 24], [7, 24], [8, 24], [4, 26], [5, 26], [6, 26], [7, 26], [8, 26], [9, 26], [4, 27], [5, 27],
                [6, 27], [7, 27], [8, 27], [9, 27], [4, 28], [5, 28], [6, 28], [7, 28], [8, 28], [9, 28],
            );
        }
        if (Auth::id() == 3){
            $tmp = array(
                [1,1], [1,2], [1,3], [1,4], [1,5], [1,6], [1,7], [1,8], [1,9], [1,10], [1,11], [1,12], [1,13], [1,14], [1,15], [1,16], [1,17], [1,18], [1,19], [1,20], [1,21], [1,22], [1,23], [1,24], [1,25], [1,26], [1,27], [1,28], [1,29], [1,30], [1,31], [1,32], [1,33], [1,34], [1,35], [1,36], [1,37], [1,38], [1,39], [1,40], [1,41],
                [2,1], [3,1], [4,1], [5,1], [6,1], [7,1], [8,1], [9,1], [10,1], [11,1], [12,1], [13,1], [14,1], [15,1], [16,1], [17,1], [18,1], [19,1], [20,1], [21,1], [22,1], [23,1], [24,1], [25,1], [26,1], [3,3], [4,3], [5,3], [6,9], [7,3], [8,3], [9,3], [10,3], [11,3], [12,3], [13,3], [14,3], [15,3], [16,3], [17,3], [3,4], [4,4],
                [5,4], [6,3], [7,4], [8,4], [9,4], [10,4], [11,4], [12,4], [13,4], [14,4], [15,4], [16,4], [17,4], [3,5], [4,5], [5,5], [6,4], [7,5], [8,5], [9,5], [10,5], [11,5], [12,5], [13,5], [14,5], [15,5], [16,5], [17,5], [3,6], [4,6], [5,6], [6,5], [7,6], [8,6], [9,6], [10,6], [11,6], [12,6], [13,6], [14,6], [15,6], [16,6],
                [17,6], [3,7], [4,7], [5,7], [6,6], [7,7], [8,7], [9,7], [10,7], [11,7], [12,7], [13,7], [14,7], [15,7], [16,7], [17,7], [3,8], [4,8], [5,8], [6,7], [7,8], [8,8], [9,8], [10,8], [11,8], [12,8], [13,8], [14,8], [15,8], [16,8], [17,8], [3,9], [4,9], [5,9], [6,8], [7,9], [8,9], [9,9], [10,9], [11,9], [12,9], [13,9], [14,9], [15,9], [16,9], [17,9],
                [3,11], [4,11], [5,11], [6,11], [7,11], [8,11], [9,11], [10,11], [11,11], [12,11], [13,11], [14,11], [15,11], [16,11],
                [3,12], [4,12], [5,12], [6,12], [7,12], [8,12], [9,12], [10,12], [11,12], [12,12], [13,12], [14,12], [15,12], [16,12],
                [3,13], [4,13], [5,13], [6,13], [7,13], [8,13], [9,13], [10,13], [11,13], [12,13], [13,13], [14,13], [15,13], [16,13],
                [3,14], [4,14], [5,14], [6,14], [7,14], [8,14], [9,14], [10,14], [11,14], [12,14], [13,14], [14,14], [15,14], [16,14],
                [3,15], [4,15], [5,15], [6,15], [7,15], [8,15], [9,15], [10,15], [11,15], [12,15], [13,15], [14,15], [15,15], [16,15],
                [3,16], [4,16], [5,16], [6,16], [7,16], [8,16], [9,16], [10,16], [11,16], [12,16], [13,16], [14,16], [15,16], [16,16],
                [3,18], [4,18], [5,18], [6,18], [7,18], [8,18], [9,18], [10,18], [11,18],
                [3,19], [4,19], [5,19], [6,19], [7,19], [8,19], [9,19], [10,19], [11,19],
                [3,20], [4,20], [5,20], [6,20], [7,20], [8,20], [9,20], [10,20], [11,20],
                [3,21], [4,21], [5,21], [6,21], [7,21], [8,21], [9,21], [10,21], [11,21],
                [3,22], [4,22], [5,22], [6,22], [7,22], [8,22], [9,22], [10,22], [11,22],
                [3,23], [4,23], [5,23], [6,23], [7,23], [8,23], [9,23], [10,23], [11,23],
                [3,24], [4,24], [5,24], [6,24], [7,24], [8,24], [9,24], [10,24], [11,24],
                [3,25], [4,25], [5,25], [6,25], [7,25], [8,25], [9,25], [10,25], [11,25],
                [3,26], [4,26], [5,26], [6,26], [7,26], [8,26], [9,26], [10,26], [11,26],
                [3,27], [4,27], [5,27], [6,27], [7,27], [8,27], [9,27], [10,27], [11,27], [11,41],
                [3,29], [4,29], [5,29], [6,29], [7,29], [8,29], [9,29], [10,29], [3,30], [4,30], [5,30], [6,30], [7,30], [8,30], [9,30], [10,30],
                [3,31], [4,31], [5,31], [6,31], [7,31], [8,31], [9,31], [10,31], [3,33], [4,33], [5,33], [6,33], [7,33], [8,33], [9,33], [10,33],
                [3,34], [4,34], [5,34], [6,34], [7,34], [8,34], [9,34], [10,34], [3,35], [4,35], [5,35], [6,35], [7,35], [8,35], [9,35], [10,35],
                [3,37], [4,37], [5,37], [6,37], [7,37], [8,37], [3,38], [4,38], [5,38], [6,38], [7,38], [8,38], [9,37], [10,37],
                [3,39], [4,39], [5,39], [6,39], [7,39], [8,39], [9,38], [10,38], [3,41], [4,41], [5,41], [6,41], [7,41], [8,41], [9,41], [10,41],
                [19,3], [20,3], [21,3], [22,3], [23,3], [25,3], [26,3], [19,4], [20,4], [21,4], [22,4], [23,4], [25,4], [26,4], [19,5], [20,5], [21,5], [22,5],
                [23,5], [25,5], [26,5], [19,6], [20,6], [21,6], [22,6], [23,6], [25,6], [26,6], [19,7], [20,7], [21,7], [22,7], [23,7], [25,7], [26,7], [19,8],
                [20,8], [21,8], [22,8], [23,8], [25,8], [26,8], [19,9], [20,9], [21,9], [22,9], [23,9], [25,9], [26,9], [19,10], [20,10], [21,10], [22,10], [23,10],
                [25,10], [26,10], [18,11], [19,11], [20,11], [21,11], [22,11], [23,11], [25,11], [26,11], [18,12], [19,12], [20,12], [21,12], [22,12], [23,12], [25,12],
                [26,12], [18,13], [19,13], [20,13], [21,13], [22,13], [23,13], [25,13], [26,13], [18,14], [19,14], [20,14], [21,14], [22,14], [23,14], [25,14], [26,14],
                [18,15], [19,15], [20,15], [21,15], [22,15], [23,15], [25,15], [26,15], [18,16], [19,16], [20,16], [21,16], [22,16], [23,16], [25,16], [26,16], [25,2], [26,2],
                [13,18], [14,18], [15,18], [16,18], [17,18], [18,18], [19,18], [20,18], [21,18], [22,18], [23,18], [24,18], [13,19], [14,19], [15,19], [16,19], [17,19], [18,19],
                [19,19], [20,19], [21,19], [22,19], [23,19], [24,19], [13,20], [14,20], [15,20], [16,20], [17,20], [18,20], [19,20], [20,20], [21,20], [22,20], [23,20], [24,20],
                [13,21], [14,21], [15,21], [16,21], [17,21], [18,21], [19,21], [20,21], [21,21], [22,21], [23,21], [24,21], [13,22], [14,22], [15,22], [16,22], [17,22], [18,22],
                [19,22], [20,22], [21,22], [22,22], [23,22], [24,22], [13,24], [14,24], [15,24], [16,24], [17,24], [18,24], [19,24], [20,24], [21,24], [22,24], [23,24], [24,24],
                [13,25], [14,25], [15,25], [16,25], [17,25], [18,25], [19,25], [20,25], [21,25], [22,25], [23,25], [24,25], [13,26], [14,26], [15,26], [16,26], [17,26], [18,26],
                [19,26], [20,26], [21,26], [22,26], [23,26], [24,26], [13,27], [14,27], [15,27], [16,27], [17,27], [18,27], [19,27], [20,27], [21,27], [22,27], [23,27], [24,27],
                [26,17],[26,18],[26,19],[26,20],[26,21],[26,22],[26,23],[26,24],[26,25],[26,26],[26,27],[26,28],[26,29],[26,30],[26,31],[26,32],[26,33],[26,34],[26,35],[26,36],[26,37],[26,38],[26,39],[26,40],[26,41], [25,39],
                [25,40],[25,41],[12,29], [13,29], [14,29], [15,29], [16,29], [17,29], [18,29], [19,29], [20,29], [21,29], [22,29], [23,29], [24,29], [12,30], [13,30], [14,30], [15,30], [16,30], [17,30], [18,30], [19,30], [20,30],
                [21,30], [22,30], [23,30], [24,30], [12,31], [13,31], [14,31], [15,31], [16,31], [17,31], [18,31], [19,31], [20,31], [21,31], [22,31], [23,31], [24,31], [12,32], [13,32], [14,32], [15,32], [16,32], [17,32], [18,32],
                [19,32], [20,32], [21,32], [22,32], [23,32], [24,32], [12,34], [13,34], [14,34], [15,34], [16,34], [17,34], [18,34], [19,34], [20,34], [21,34], [22,34], [23,34], [24,34], [12,35], [13,35], [14,35], [15,35], [16,35],
                [17,35], [18,35], [19,35], [20,35], [21,35], [22,35], [23,35], [24,35], [12,36], [13,36], [14,36], [15,36], [16,36], [17,36], [18,36], [19,36], [20,36], [21,36], [22,36], [23,36], [24,36], [12,37], [13,37], [14,37],
                [15,37], [16,37], [17,37], [18,37], [19,37], [20,37], [21,37], [22,37], [23,37], [24,37], [12,39], [13,39], [14,39], [15,39], [16,39], [17,39], [18,39], [19,39], [20,39], [21,39], [22,39], [23,39], [24,39], [12,40],
                [13,40], [14,40], [15,40], [16,40], [17,40], [18,40], [19,40], [20,41], [21,40], [22,40], [23,40], [24,40], [12,41], [13,41], [14,41], [15,41], [16,41], [17,41], [18,41], [19,41], [20,40], [21,41], [22,41], [23,41], [24,41],
                [2,41], [3,41], [4,41], [5,41], [6,41], [7,41], [8,41], [9,41], [10,41], [9,39], [10,39]
            );
        }

//        var_dump($tmp);
        foreach ($tmp as $t) {
            $this->disable[] = $t;
        }
    }


    public function displayPic()
    {
        $a='';
        $b='';
//        header('content-type:text/html;charset=utf-8');
        $a=$a.'Dari Start ke End, latar belakang hijau mewakili jalur terpendek, dan latar belakang hitam mewakili rintangan.<br /><br />';
        $step = count($this->route) - 1;
//        $a=$a.($step > 0) ? '<font color="green">Total ' . $step . ' Langkah</font>' : '<font color="red">Tidak terjangkau!</font>';
        if ($step > 0){
//            $a=$a.'<font color="green">Total ' . $step*5 . ' meter</font>';
            $b = $step*5;
        }
//        else{
//            $a=$a.'<font color="red">Tidak terjangkau!</font>';
//        }
        $a=$a.'<table border="1">';
        for ($y = 1; $y <= $this->_y; $y++) {
            $a=$a. '<tr>';
            for ($x = 1; $x <= $this->_x; $x++) {
                $current = array($x, $y);

                if (in_array($current, $this->disable)) // 黑色表示路障
                    $bg = 'bgcolor="#000"';
                elseif (in_array($current, $this->route)) // 最短路径
                    $bg = 'bgcolor="#5cb85c"';
                else
                    $bg = '';

                if ($current == $this->_start)
                    $content = 'Str';
                elseif ($current == $this->_end)
                    $content = 'End';
                else
                    $content = '&nbsp;';

                $a=$a. '<td style="width:20px; height: 20px;" ' . $bg . '>' . $content . '</td>';
            }
            $a=$a. '</tr>';
        }
        $a=$a.'</table>';
        return [$a,$b];
    }

}
